<?php

/**
 * TransactionApi
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimplePay API v2
 *
 * This is a SimplePay API v2 documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@conedevelopment.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\SimplePay\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Cone\SimplePay\ApiException;
use Cone\SimplePay\Configuration;
use Cone\SimplePay\HeaderSelector;
use Cone\SimplePay\FormDataProcessor;
use Cone\SimplePay\ObjectSerializer;

/**
 * TransactionApi Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'callDo' => [
            'application/json',
        ],
        'cardCancel' => [
            'application/json',
        ],
        'cardQuery' => [
            'application/json',
        ],
        'doApplePay' => [
            'application/json',
        ],
        'doRecurring' => [
            'application/json',
        ],
        'finish' => [
            'application/json',
        ],
        'query' => [
            'application/json',
        ],
        'refund' => [
            'application/json',
        ],
        'start' => [
            'application/json',
        ],
        'startApplePay' => [
            'application/json',
        ],
        'startEam' => [
            'application/json',
        ],
        'tokenCancel' => [
            'application/json',
        ],
        'tokenQuery' => [
            'application/json',
        ],
        'transactionCancel' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation callDo
     *
     * Do a one-click transaction
     *
     * @param  \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callDo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\Do200Response
     */
    public function callDo(
        \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction,
        string $contentType = self::contentTypes['callDo'][0]
    ): \Cone\SimplePay\Model\Do200Response {
        list($response) = $this->callDoWithHttpInfo($oneClickTransaction, $contentType);
        return $response;
    }

    /**
     * Operation callDoWithHttpInfo
     *
     * Do a one-click transaction
     *
     * @param  \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callDo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\Do200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function callDoWithHttpInfo(
        \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction,
        string $contentType = self::contentTypes['callDo'][0]
    ): array {
        $request = $this->callDoRequest($oneClickTransaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\Do200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\Do200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\Do200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation callDoAsync
     *
     * Do a one-click transaction
     *
     * @param  \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callDo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function callDoAsync(
        \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction,
        string $contentType = self::contentTypes['callDo'][0]
    ): PromiseInterface {
        return $this->callDoAsyncWithHttpInfo($oneClickTransaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callDoAsyncWithHttpInfo
     *
     * Do a one-click transaction
     *
     * @param  \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callDo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function callDoAsyncWithHttpInfo(
        \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction,
        string $contentType = self::contentTypes['callDo'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\Do200Response';
        $request = $this->callDoRequest($oneClickTransaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'callDo'
     *
     * @param  \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['callDo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function callDoRequest(
        \Cone\SimplePay\Model\OneClickTransaction $oneClickTransaction,
        string $contentType = self::contentTypes['callDo'][0]
    ): Request {

        // verify the required parameter 'oneClickTransaction' is set
        if ($oneClickTransaction === null || (is_array($oneClickTransaction) && count($oneClickTransaction) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $oneClickTransaction when calling callDo'
            );
        }


        $resourcePath = '/do';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oneClickTransaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oneClickTransaction));
            } else {
                $httpBody = $oneClickTransaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cardCancel
     *
     * Cancel a saved card
     *
     * @param  \Cone\SimplePay\Model\CardCancel $cardCancel The card object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardCancel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\CardCancel200Response
     */
    public function cardCancel(
        \Cone\SimplePay\Model\CardCancel $cardCancel,
        string $contentType = self::contentTypes['cardCancel'][0]
    ): \Cone\SimplePay\Model\CardCancel200Response {
        list($response) = $this->cardCancelWithHttpInfo($cardCancel, $contentType);
        return $response;
    }

    /**
     * Operation cardCancelWithHttpInfo
     *
     * Cancel a saved card
     *
     * @param  \Cone\SimplePay\Model\CardCancel $cardCancel The card object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardCancel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\CardCancel200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function cardCancelWithHttpInfo(
        \Cone\SimplePay\Model\CardCancel $cardCancel,
        string $contentType = self::contentTypes['cardCancel'][0]
    ): array {
        $request = $this->cardCancelRequest($cardCancel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\CardCancel200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\CardCancel200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\CardCancel200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation cardCancelAsync
     *
     * Cancel a saved card
     *
     * @param  \Cone\SimplePay\Model\CardCancel $cardCancel The card object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cardCancelAsync(
        \Cone\SimplePay\Model\CardCancel $cardCancel,
        string $contentType = self::contentTypes['cardCancel'][0]
    ): PromiseInterface {
        return $this->cardCancelAsyncWithHttpInfo($cardCancel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cardCancelAsyncWithHttpInfo
     *
     * Cancel a saved card
     *
     * @param  \Cone\SimplePay\Model\CardCancel $cardCancel The card object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cardCancelAsyncWithHttpInfo(
        \Cone\SimplePay\Model\CardCancel $cardCancel,
        string $contentType = self::contentTypes['cardCancel'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\CardCancel200Response';
        $request = $this->cardCancelRequest($cardCancel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cardCancel'
     *
     * @param  \Cone\SimplePay\Model\CardCancel $cardCancel The card object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cardCancelRequest(
        \Cone\SimplePay\Model\CardCancel $cardCancel,
        string $contentType = self::contentTypes['cardCancel'][0]
    ): Request {

        // verify the required parameter 'cardCancel' is set
        if ($cardCancel === null || (is_array($cardCancel) && count($cardCancel) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cardCancel when calling cardCancel'
            );
        }


        $resourcePath = '/cardcancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cardCancel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cardCancel));
            } else {
                $httpBody = $cardCancel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cardQuery
     *
     * Query a saved card
     *
     * @param  \Cone\SimplePay\Model\CardQuery $cardQuery The card object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardQuery'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\CardQuery200Response
     */
    public function cardQuery(
        \Cone\SimplePay\Model\CardQuery $cardQuery,
        string $contentType = self::contentTypes['cardQuery'][0]
    ): \Cone\SimplePay\Model\CardQuery200Response {
        list($response) = $this->cardQueryWithHttpInfo($cardQuery, $contentType);
        return $response;
    }

    /**
     * Operation cardQueryWithHttpInfo
     *
     * Query a saved card
     *
     * @param  \Cone\SimplePay\Model\CardQuery $cardQuery The card object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardQuery'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\CardQuery200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function cardQueryWithHttpInfo(
        \Cone\SimplePay\Model\CardQuery $cardQuery,
        string $contentType = self::contentTypes['cardQuery'][0]
    ): array {
        $request = $this->cardQueryRequest($cardQuery, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\CardQuery200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\CardQuery200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\CardQuery200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation cardQueryAsync
     *
     * Query a saved card
     *
     * @param  \Cone\SimplePay\Model\CardQuery $cardQuery The card object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardQuery'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cardQueryAsync(
        \Cone\SimplePay\Model\CardQuery $cardQuery,
        string $contentType = self::contentTypes['cardQuery'][0]
    ): PromiseInterface {
        return $this->cardQueryAsyncWithHttpInfo($cardQuery, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cardQueryAsyncWithHttpInfo
     *
     * Query a saved card
     *
     * @param  \Cone\SimplePay\Model\CardQuery $cardQuery The card object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardQuery'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function cardQueryAsyncWithHttpInfo(
        \Cone\SimplePay\Model\CardQuery $cardQuery,
        string $contentType = self::contentTypes['cardQuery'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\CardQuery200Response';
        $request = $this->cardQueryRequest($cardQuery, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cardQuery'
     *
     * @param  \Cone\SimplePay\Model\CardQuery $cardQuery The card object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cardQuery'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cardQueryRequest(
        \Cone\SimplePay\Model\CardQuery $cardQuery,
        string $contentType = self::contentTypes['cardQuery'][0]
    ): Request {

        // verify the required parameter 'cardQuery' is set
        if ($cardQuery === null || (is_array($cardQuery) && count($cardQuery) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $cardQuery when calling cardQuery'
            );
        }


        $resourcePath = '/cardquery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cardQuery)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cardQuery));
            } else {
                $httpBody = $cardQuery;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation doApplePay
     *
     * Start an ApplePay transaction
     *
     * @param  \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction The ApplePay transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doApplePay'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\DoApplePay200Response
     */
    public function doApplePay(
        \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction,
        string $contentType = self::contentTypes['doApplePay'][0]
    ): \Cone\SimplePay\Model\DoApplePay200Response {
        list($response) = $this->doApplePayWithHttpInfo($applePayTransaction, $contentType);
        return $response;
    }

    /**
     * Operation doApplePayWithHttpInfo
     *
     * Start an ApplePay transaction
     *
     * @param  \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction The ApplePay transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doApplePay'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\DoApplePay200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function doApplePayWithHttpInfo(
        \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction,
        string $contentType = self::contentTypes['doApplePay'][0]
    ): array {
        $request = $this->doApplePayRequest($applePayTransaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\DoApplePay200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\DoApplePay200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\DoApplePay200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation doApplePayAsync
     *
     * Start an ApplePay transaction
     *
     * @param  \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction The ApplePay transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doApplePay'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function doApplePayAsync(
        \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction,
        string $contentType = self::contentTypes['doApplePay'][0]
    ): PromiseInterface {
        return $this->doApplePayAsyncWithHttpInfo($applePayTransaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation doApplePayAsyncWithHttpInfo
     *
     * Start an ApplePay transaction
     *
     * @param  \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction The ApplePay transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doApplePay'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function doApplePayAsyncWithHttpInfo(
        \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction,
        string $contentType = self::contentTypes['doApplePay'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\DoApplePay200Response';
        $request = $this->doApplePayRequest($applePayTransaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'doApplePay'
     *
     * @param  \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction The ApplePay transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doApplePay'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function doApplePayRequest(
        \Cone\SimplePay\Model\ApplePayTransaction $applePayTransaction,
        string $contentType = self::contentTypes['doApplePay'][0]
    ): Request {

        // verify the required parameter 'applePayTransaction' is set
        if ($applePayTransaction === null || (is_array($applePayTransaction) && count($applePayTransaction) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $applePayTransaction when calling doApplePay'
            );
        }


        $resourcePath = '/doapplepay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($applePayTransaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($applePayTransaction));
            } else {
                $httpBody = $applePayTransaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation doRecurring
     *
     * Do a recurring transaction
     *
     * @param  \Cone\SimplePay\Model\TokenTransaction $tokenTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doRecurring'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\DoRecurring200Response
     */
    public function doRecurring(
        \Cone\SimplePay\Model\TokenTransaction $tokenTransaction,
        string $contentType = self::contentTypes['doRecurring'][0]
    ): \Cone\SimplePay\Model\DoRecurring200Response {
        list($response) = $this->doRecurringWithHttpInfo($tokenTransaction, $contentType);
        return $response;
    }

    /**
     * Operation doRecurringWithHttpInfo
     *
     * Do a recurring transaction
     *
     * @param  \Cone\SimplePay\Model\TokenTransaction $tokenTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doRecurring'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\DoRecurring200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function doRecurringWithHttpInfo(
        \Cone\SimplePay\Model\TokenTransaction $tokenTransaction,
        string $contentType = self::contentTypes['doRecurring'][0]
    ): array {
        $request = $this->doRecurringRequest($tokenTransaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\DoRecurring200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\DoRecurring200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\DoRecurring200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation doRecurringAsync
     *
     * Do a recurring transaction
     *
     * @param  \Cone\SimplePay\Model\TokenTransaction $tokenTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doRecurring'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function doRecurringAsync(
        \Cone\SimplePay\Model\TokenTransaction $tokenTransaction,
        string $contentType = self::contentTypes['doRecurring'][0]
    ): PromiseInterface {
        return $this->doRecurringAsyncWithHttpInfo($tokenTransaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation doRecurringAsyncWithHttpInfo
     *
     * Do a recurring transaction
     *
     * @param  \Cone\SimplePay\Model\TokenTransaction $tokenTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doRecurring'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function doRecurringAsyncWithHttpInfo(
        \Cone\SimplePay\Model\TokenTransaction $tokenTransaction,
        string $contentType = self::contentTypes['doRecurring'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\DoRecurring200Response';
        $request = $this->doRecurringRequest($tokenTransaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'doRecurring'
     *
     * @param  \Cone\SimplePay\Model\TokenTransaction $tokenTransaction The transaction object you would init. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['doRecurring'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function doRecurringRequest(
        \Cone\SimplePay\Model\TokenTransaction $tokenTransaction,
        string $contentType = self::contentTypes['doRecurring'][0]
    ): Request {

        // verify the required parameter 'tokenTransaction' is set
        if ($tokenTransaction === null || (is_array($tokenTransaction) && count($tokenTransaction) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tokenTransaction when calling doRecurring'
            );
        }


        $resourcePath = '/dorecurring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tokenTransaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tokenTransaction));
            } else {
                $httpBody = $tokenTransaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation finish
     *
     * Finish a two-step transaction
     *
     * @param  \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction The authorized transaction object you would like to finish. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\Finish200Response
     */
    public function finish(
        \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction,
        string $contentType = self::contentTypes['finish'][0]
    ): \Cone\SimplePay\Model\Finish200Response {
        list($response) = $this->finishWithHttpInfo($authorizedTransaction, $contentType);
        return $response;
    }

    /**
     * Operation finishWithHttpInfo
     *
     * Finish a two-step transaction
     *
     * @param  \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction The authorized transaction object you would like to finish. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\Finish200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function finishWithHttpInfo(
        \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction,
        string $contentType = self::contentTypes['finish'][0]
    ): array {
        $request = $this->finishRequest($authorizedTransaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\Finish200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\Finish200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\Finish200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation finishAsync
     *
     * Finish a two-step transaction
     *
     * @param  \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction The authorized transaction object you would like to finish. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function finishAsync(
        \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction,
        string $contentType = self::contentTypes['finish'][0]
    ): PromiseInterface {
        return $this->finishAsyncWithHttpInfo($authorizedTransaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation finishAsyncWithHttpInfo
     *
     * Finish a two-step transaction
     *
     * @param  \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction The authorized transaction object you would like to finish. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function finishAsyncWithHttpInfo(
        \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction,
        string $contentType = self::contentTypes['finish'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\Finish200Response';
        $request = $this->finishRequest($authorizedTransaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'finish'
     *
     * @param  \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction The authorized transaction object you would like to finish. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finish'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function finishRequest(
        \Cone\SimplePay\Model\AuthorizedTransaction $authorizedTransaction,
        string $contentType = self::contentTypes['finish'][0]
    ): Request {

        // verify the required parameter 'authorizedTransaction' is set
        if ($authorizedTransaction === null || (is_array($authorizedTransaction) && count($authorizedTransaction) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $authorizedTransaction when calling finish'
            );
        }


        $resourcePath = '/finish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($authorizedTransaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($authorizedTransaction));
            } else {
                $httpBody = $authorizedTransaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation query
     *
     * Query a set transactions
     *
     * @param  \Cone\SimplePay\Model\Query $query The query parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['query'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\Query200Response
     */
    public function query(
        \Cone\SimplePay\Model\Query $query,
        string $contentType = self::contentTypes['query'][0]
    ): \Cone\SimplePay\Model\Query200Response {
        list($response) = $this->queryWithHttpInfo($query, $contentType);
        return $response;
    }

    /**
     * Operation queryWithHttpInfo
     *
     * Query a set transactions
     *
     * @param  \Cone\SimplePay\Model\Query $query The query parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['query'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\Query200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryWithHttpInfo(
        \Cone\SimplePay\Model\Query $query,
        string $contentType = self::contentTypes['query'][0]
    ): array {
        $request = $this->queryRequest($query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\Query200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\Query200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\Query200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation queryAsync
     *
     * Query a set transactions
     *
     * @param  \Cone\SimplePay\Model\Query $query The query parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['query'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function queryAsync(
        \Cone\SimplePay\Model\Query $query,
        string $contentType = self::contentTypes['query'][0]
    ): PromiseInterface {
        return $this->queryAsyncWithHttpInfo($query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryAsyncWithHttpInfo
     *
     * Query a set transactions
     *
     * @param  \Cone\SimplePay\Model\Query $query The query parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['query'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function queryAsyncWithHttpInfo(
        \Cone\SimplePay\Model\Query $query,
        string $contentType = self::contentTypes['query'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\Query200Response';
        $request = $this->queryRequest($query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'query'
     *
     * @param  \Cone\SimplePay\Model\Query $query The query parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['query'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryRequest(
        \Cone\SimplePay\Model\Query $query,
        string $contentType = self::contentTypes['query'][0]
    ): Request {

        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $query when calling query'
            );
        }


        $resourcePath = '/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($query));
            } else {
                $httpBody = $query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refund
     *
     * Refund a transaction
     *
     * @param  \Cone\SimplePay\Model\Refund $refund The refund object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refund'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\Refund200Response
     */
    public function refund(
        \Cone\SimplePay\Model\Refund $refund,
        string $contentType = self::contentTypes['refund'][0]
    ): \Cone\SimplePay\Model\Refund200Response {
        list($response) = $this->refundWithHttpInfo($refund, $contentType);
        return $response;
    }

    /**
     * Operation refundWithHttpInfo
     *
     * Refund a transaction
     *
     * @param  \Cone\SimplePay\Model\Refund $refund The refund object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refund'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\Refund200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundWithHttpInfo(
        \Cone\SimplePay\Model\Refund $refund,
        string $contentType = self::contentTypes['refund'][0]
    ): array {
        $request = $this->refundRequest($refund, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\Refund200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\Refund200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\Refund200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation refundAsync
     *
     * Refund a transaction
     *
     * @param  \Cone\SimplePay\Model\Refund $refund The refund object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refund'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function refundAsync(
        \Cone\SimplePay\Model\Refund $refund,
        string $contentType = self::contentTypes['refund'][0]
    ): PromiseInterface {
        return $this->refundAsyncWithHttpInfo($refund, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundAsyncWithHttpInfo
     *
     * Refund a transaction
     *
     * @param  \Cone\SimplePay\Model\Refund $refund The refund object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refund'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function refundAsyncWithHttpInfo(
        \Cone\SimplePay\Model\Refund $refund,
        string $contentType = self::contentTypes['refund'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\Refund200Response';
        $request = $this->refundRequest($refund, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refund'
     *
     * @param  \Cone\SimplePay\Model\Refund $refund The refund object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refund'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundRequest(
        \Cone\SimplePay\Model\Refund $refund,
        string $contentType = self::contentTypes['refund'][0]
    ): Request {

        // verify the required parameter 'refund' is set
        if ($refund === null || (is_array($refund) && count($refund) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $refund when calling refund'
            );
        }


        $resourcePath = '/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refund)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refund));
            } else {
                $httpBody = $refund;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation start
     *
     * Start a transaction
     *
     * @param  \Cone\SimplePay\Model\Transaction $transaction The transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['start'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\Start200Response
     */
    public function start(
        \Cone\SimplePay\Model\Transaction $transaction,
        string $contentType = self::contentTypes['start'][0]
    ): \Cone\SimplePay\Model\Start200Response {
        list($response) = $this->startWithHttpInfo($transaction, $contentType);
        return $response;
    }

    /**
     * Operation startWithHttpInfo
     *
     * Start a transaction
     *
     * @param  \Cone\SimplePay\Model\Transaction $transaction The transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['start'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\Start200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function startWithHttpInfo(
        \Cone\SimplePay\Model\Transaction $transaction,
        string $contentType = self::contentTypes['start'][0]
    ): array {
        $request = $this->startRequest($transaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\Start200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\Start200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\Start200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation startAsync
     *
     * Start a transaction
     *
     * @param  \Cone\SimplePay\Model\Transaction $transaction The transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['start'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startAsync(
        \Cone\SimplePay\Model\Transaction $transaction,
        string $contentType = self::contentTypes['start'][0]
    ): PromiseInterface {
        return $this->startAsyncWithHttpInfo($transaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startAsyncWithHttpInfo
     *
     * Start a transaction
     *
     * @param  \Cone\SimplePay\Model\Transaction $transaction The transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['start'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startAsyncWithHttpInfo(
        \Cone\SimplePay\Model\Transaction $transaction,
        string $contentType = self::contentTypes['start'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\Start200Response';
        $request = $this->startRequest($transaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'start'
     *
     * @param  \Cone\SimplePay\Model\Transaction $transaction The transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['start'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startRequest(
        \Cone\SimplePay\Model\Transaction $transaction,
        string $contentType = self::contentTypes['start'][0]
    ): Request {

        // verify the required parameter 'transaction' is set
        if ($transaction === null || (is_array($transaction) && count($transaction) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transaction when calling start'
            );
        }


        $resourcePath = '/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transaction));
            } else {
                $httpBody = $transaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startApplePay
     *
     * Start an ApplePay session
     *
     * @param  \Cone\SimplePay\Model\ApplePaySession $applePaySession The ApplePay session object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startApplePay'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\StartApplePay200Response
     */
    public function startApplePay(
        \Cone\SimplePay\Model\ApplePaySession $applePaySession,
        string $contentType = self::contentTypes['startApplePay'][0]
    ): \Cone\SimplePay\Model\StartApplePay200Response {
        list($response) = $this->startApplePayWithHttpInfo($applePaySession, $contentType);
        return $response;
    }

    /**
     * Operation startApplePayWithHttpInfo
     *
     * Start an ApplePay session
     *
     * @param  \Cone\SimplePay\Model\ApplePaySession $applePaySession The ApplePay session object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startApplePay'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\StartApplePay200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function startApplePayWithHttpInfo(
        \Cone\SimplePay\Model\ApplePaySession $applePaySession,
        string $contentType = self::contentTypes['startApplePay'][0]
    ): array {
        $request = $this->startApplePayRequest($applePaySession, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\StartApplePay200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\StartApplePay200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\StartApplePay200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation startApplePayAsync
     *
     * Start an ApplePay session
     *
     * @param  \Cone\SimplePay\Model\ApplePaySession $applePaySession The ApplePay session object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startApplePay'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startApplePayAsync(
        \Cone\SimplePay\Model\ApplePaySession $applePaySession,
        string $contentType = self::contentTypes['startApplePay'][0]
    ): PromiseInterface {
        return $this->startApplePayAsyncWithHttpInfo($applePaySession, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startApplePayAsyncWithHttpInfo
     *
     * Start an ApplePay session
     *
     * @param  \Cone\SimplePay\Model\ApplePaySession $applePaySession The ApplePay session object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startApplePay'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startApplePayAsyncWithHttpInfo(
        \Cone\SimplePay\Model\ApplePaySession $applePaySession,
        string $contentType = self::contentTypes['startApplePay'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\StartApplePay200Response';
        $request = $this->startApplePayRequest($applePaySession, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startApplePay'
     *
     * @param  \Cone\SimplePay\Model\ApplePaySession $applePaySession The ApplePay session object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startApplePay'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startApplePayRequest(
        \Cone\SimplePay\Model\ApplePaySession $applePaySession,
        string $contentType = self::contentTypes['startApplePay'][0]
    ): Request {

        // verify the required parameter 'applePaySession' is set
        if ($applePaySession === null || (is_array($applePaySession) && count($applePaySession) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $applePaySession when calling startApplePay'
            );
        }


        $resourcePath = '/startapplepay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($applePaySession)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($applePaySession));
            } else {
                $httpBody = $applePaySession;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startEam
     *
     * Start an EAM transaction
     *
     * @param  \Cone\SimplePay\Model\EamTransaction $eamTransaction The EAM transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startEam'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\StartEam200Response
     */
    public function startEam(
        \Cone\SimplePay\Model\EamTransaction $eamTransaction,
        string $contentType = self::contentTypes['startEam'][0]
    ): \Cone\SimplePay\Model\StartEam200Response {
        list($response) = $this->startEamWithHttpInfo($eamTransaction, $contentType);
        return $response;
    }

    /**
     * Operation startEamWithHttpInfo
     *
     * Start an EAM transaction
     *
     * @param  \Cone\SimplePay\Model\EamTransaction $eamTransaction The EAM transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startEam'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\StartEam200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function startEamWithHttpInfo(
        \Cone\SimplePay\Model\EamTransaction $eamTransaction,
        string $contentType = self::contentTypes['startEam'][0]
    ): array {
        $request = $this->startEamRequest($eamTransaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\StartEam200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\StartEam200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\StartEam200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation startEamAsync
     *
     * Start an EAM transaction
     *
     * @param  \Cone\SimplePay\Model\EamTransaction $eamTransaction The EAM transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startEam'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startEamAsync(
        \Cone\SimplePay\Model\EamTransaction $eamTransaction,
        string $contentType = self::contentTypes['startEam'][0]
    ): PromiseInterface {
        return $this->startEamAsyncWithHttpInfo($eamTransaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startEamAsyncWithHttpInfo
     *
     * Start an EAM transaction
     *
     * @param  \Cone\SimplePay\Model\EamTransaction $eamTransaction The EAM transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startEam'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function startEamAsyncWithHttpInfo(
        \Cone\SimplePay\Model\EamTransaction $eamTransaction,
        string $contentType = self::contentTypes['startEam'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\StartEam200Response';
        $request = $this->startEamRequest($eamTransaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startEam'
     *
     * @param  \Cone\SimplePay\Model\EamTransaction $eamTransaction The EAM transaction object you would like to start. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['startEam'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startEamRequest(
        \Cone\SimplePay\Model\EamTransaction $eamTransaction,
        string $contentType = self::contentTypes['startEam'][0]
    ): Request {

        // verify the required parameter 'eamTransaction' is set
        if ($eamTransaction === null || (is_array($eamTransaction) && count($eamTransaction) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $eamTransaction when calling startEam'
            );
        }


        $resourcePath = '/starteam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($eamTransaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($eamTransaction));
            } else {
                $httpBody = $eamTransaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenCancel
     *
     * Cancel a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenCancel $tokenCancel The token object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCancel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\TokenCancel200Response
     */
    public function tokenCancel(
        \Cone\SimplePay\Model\TokenCancel $tokenCancel,
        string $contentType = self::contentTypes['tokenCancel'][0]
    ): \Cone\SimplePay\Model\TokenCancel200Response {
        list($response) = $this->tokenCancelWithHttpInfo($tokenCancel, $contentType);
        return $response;
    }

    /**
     * Operation tokenCancelWithHttpInfo
     *
     * Cancel a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenCancel $tokenCancel The token object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCancel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\TokenCancel200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenCancelWithHttpInfo(
        \Cone\SimplePay\Model\TokenCancel $tokenCancel,
        string $contentType = self::contentTypes['tokenCancel'][0]
    ): array {
        $request = $this->tokenCancelRequest($tokenCancel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\TokenCancel200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\TokenCancel200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\TokenCancel200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation tokenCancelAsync
     *
     * Cancel a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenCancel $tokenCancel The token object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function tokenCancelAsync(
        \Cone\SimplePay\Model\TokenCancel $tokenCancel,
        string $contentType = self::contentTypes['tokenCancel'][0]
    ): PromiseInterface {
        return $this->tokenCancelAsyncWithHttpInfo($tokenCancel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenCancelAsyncWithHttpInfo
     *
     * Cancel a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenCancel $tokenCancel The token object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function tokenCancelAsyncWithHttpInfo(
        \Cone\SimplePay\Model\TokenCancel $tokenCancel,
        string $contentType = self::contentTypes['tokenCancel'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\TokenCancel200Response';
        $request = $this->tokenCancelRequest($tokenCancel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenCancel'
     *
     * @param  \Cone\SimplePay\Model\TokenCancel $tokenCancel The token object you would cancel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenCancelRequest(
        \Cone\SimplePay\Model\TokenCancel $tokenCancel,
        string $contentType = self::contentTypes['tokenCancel'][0]
    ): Request {

        // verify the required parameter 'tokenCancel' is set
        if ($tokenCancel === null || (is_array($tokenCancel) && count($tokenCancel) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tokenCancel when calling tokenCancel'
            );
        }


        $resourcePath = '/tokencancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tokenCancel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tokenCancel));
            } else {
                $httpBody = $tokenCancel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenQuery
     *
     * Query a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenQuery $tokenQuery The token object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenQuery'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\TokenQuery200Response
     */
    public function tokenQuery(
        \Cone\SimplePay\Model\TokenQuery $tokenQuery,
        string $contentType = self::contentTypes['tokenQuery'][0]
    ): \Cone\SimplePay\Model\TokenQuery200Response {
        list($response) = $this->tokenQueryWithHttpInfo($tokenQuery, $contentType);
        return $response;
    }

    /**
     * Operation tokenQueryWithHttpInfo
     *
     * Query a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenQuery $tokenQuery The token object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenQuery'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\TokenQuery200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenQueryWithHttpInfo(
        \Cone\SimplePay\Model\TokenQuery $tokenQuery,
        string $contentType = self::contentTypes['tokenQuery'][0]
    ): array {
        $request = $this->tokenQueryRequest($tokenQuery, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\TokenQuery200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\TokenQuery200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\TokenQuery200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation tokenQueryAsync
     *
     * Query a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenQuery $tokenQuery The token object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenQuery'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function tokenQueryAsync(
        \Cone\SimplePay\Model\TokenQuery $tokenQuery,
        string $contentType = self::contentTypes['tokenQuery'][0]
    ): PromiseInterface {
        return $this->tokenQueryAsyncWithHttpInfo($tokenQuery, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenQueryAsyncWithHttpInfo
     *
     * Query a saved token
     *
     * @param  \Cone\SimplePay\Model\TokenQuery $tokenQuery The token object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenQuery'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function tokenQueryAsyncWithHttpInfo(
        \Cone\SimplePay\Model\TokenQuery $tokenQuery,
        string $contentType = self::contentTypes['tokenQuery'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\TokenQuery200Response';
        $request = $this->tokenQueryRequest($tokenQuery, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenQuery'
     *
     * @param  \Cone\SimplePay\Model\TokenQuery $tokenQuery The token object you would query. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenQuery'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenQueryRequest(
        \Cone\SimplePay\Model\TokenQuery $tokenQuery,
        string $contentType = self::contentTypes['tokenQuery'][0]
    ): Request {

        // verify the required parameter 'tokenQuery' is set
        if ($tokenQuery === null || (is_array($tokenQuery) && count($tokenQuery) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tokenQuery when calling tokenQuery'
            );
        }


        $resourcePath = '/tokenquery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tokenQuery)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tokenQuery));
            } else {
                $httpBody = $tokenQuery;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionCancel
     *
     * Cancel a transaction
     *
     * @param  \Cone\SimplePay\Model\TransactionCancel $transactionCancel The cancel object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionCancel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cone\SimplePay\Model\TransactionCancel200Response
     */
    public function transactionCancel(
        \Cone\SimplePay\Model\TransactionCancel $transactionCancel,
        string $contentType = self::contentTypes['transactionCancel'][0]
    ): \Cone\SimplePay\Model\TransactionCancel200Response {
        list($response) = $this->transactionCancelWithHttpInfo($transactionCancel, $contentType);
        return $response;
    }

    /**
     * Operation transactionCancelWithHttpInfo
     *
     * Cancel a transaction
     *
     * @param  \Cone\SimplePay\Model\TransactionCancel $transactionCancel The cancel object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionCancel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cone\SimplePay\Model\TransactionCancel200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionCancelWithHttpInfo(
        \Cone\SimplePay\Model\TransactionCancel $transactionCancel,
        string $contentType = self::contentTypes['transactionCancel'][0]
    ): array {
        $request = $this->transactionCancelRequest($transactionCancel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Cone\SimplePay\Model\TransactionCancel200Response',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Cone\SimplePay\Model\TransactionCancel200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cone\SimplePay\Model\TransactionCancel200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation transactionCancelAsync
     *
     * Cancel a transaction
     *
     * @param  \Cone\SimplePay\Model\TransactionCancel $transactionCancel The cancel object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function transactionCancelAsync(
        \Cone\SimplePay\Model\TransactionCancel $transactionCancel,
        string $contentType = self::contentTypes['transactionCancel'][0]
    ): PromiseInterface {
        return $this->transactionCancelAsyncWithHttpInfo($transactionCancel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionCancelAsyncWithHttpInfo
     *
     * Cancel a transaction
     *
     * @param  \Cone\SimplePay\Model\TransactionCancel $transactionCancel The cancel object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function transactionCancelAsyncWithHttpInfo(
        \Cone\SimplePay\Model\TransactionCancel $transactionCancel,
        string $contentType = self::contentTypes['transactionCancel'][0]
    ): PromiseInterface {
        $returnType = '\Cone\SimplePay\Model\TransactionCancel200Response';
        $request = $this->transactionCancelRequest($transactionCancel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionCancel'
     *
     * @param  \Cone\SimplePay\Model\TransactionCancel $transactionCancel The cancel object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionCancel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionCancelRequest(
        \Cone\SimplePay\Model\TransactionCancel $transactionCancel,
        string $contentType = self::contentTypes['transactionCancel'][0]
    ): Request {

        // verify the required parameter 'transactionCancel' is set
        if ($transactionCancel === null || (is_array($transactionCancel) && count($transactionCancel) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transactionCancel when calling transactionCancel'
            );
        }


        $resourcePath = '/transactioncancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transactionCancel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transactionCancel));
            } else {
                $httpBody = $transactionCancel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
