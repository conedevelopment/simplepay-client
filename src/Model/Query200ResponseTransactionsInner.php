<?php

/**
 * Query200ResponseTransactionsInner
 *
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimplePay API v2
 *
 * This is a SimplePay API v2 documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@conedevelopment.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\SimplePay\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Cone\SimplePay\ObjectSerializer;

/**
 * Query200ResponseTransactionsInner Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Query200ResponseTransactionsInner implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'query_200_response_transactions_inner';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = [
        'salt' => 'string',
        'merchant' => 'string',
        'orderRef' => 'string',
        'currecy' => '\Cone\SimplePay\Model\Currency',
        'currecyEnum' => '\Cone\SimplePay\Model\Currency',
        'customer' => 'string',
        'customerEmail' => 'string',
        'language' => '\Cone\SimplePay\Model\Language',
        'twoStep' => 'bool',
        'total' => 'float',
        'items' => '\Cone\SimplePay\Model\Query200ResponseTransactionsInnerItemsInner[]',
        'discount' => 'float',
        'shippingCost' => 'float',
        'invoice' => '\Cone\SimplePay\Model\Invoice',
        'delivery' => '\Cone\SimplePay\Model\Delivery',
        'transactionId' => 'float',
        'status' => '\Cone\SimplePay\Model\Status',
        'resultCode' => 'string',
        'refundStatus' => '\Cone\SimplePay\Model\RefundStatus',
        'refunds' => '\Cone\SimplePay\Model\Query200ResponseTransactionsInnerRefundsInner[]',
        'remainingTotal' => 'float',
        'paymentDate' => 'string',
        'method' => '\Cone\SimplePay\Model\Method',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'salt' => null,
        'merchant' => null,
        'orderRef' => null,
        'currecy' => null,
        'currecyEnum' => null,
        'customer' => null,
        'customerEmail' => 'email',
        'language' => null,
        'twoStep' => null,
        'total' => null,
        'items' => null,
        'discount' => null,
        'shippingCost' => null,
        'invoice' => null,
        'delivery' => null,
        'transactionId' => null,
        'status' => null,
        'resultCode' => null,
        'refundStatus' => null,
        'refunds' => null,
        'remainingTotal' => null,
        'paymentDate' => null,
        'method' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = [
        'salt' => false,
        'merchant' => false,
        'orderRef' => false,
        'currecy' => false,
        'currecyEnum' => false,
        'customer' => false,
        'customerEmail' => false,
        'language' => false,
        'twoStep' => false,
        'total' => false,
        'items' => false,
        'discount' => false,
        'shippingCost' => false,
        'invoice' => false,
        'delivery' => false,
        'transactionId' => false,
        'status' => false,
        'resultCode' => false,
        'refundStatus' => false,
        'refunds' => false,
        'remainingTotal' => false,
        'paymentDate' => false,
        'method' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'salt' => 'salt',
        'merchant' => 'merchant',
        'orderRef' => 'orderRef',
        'currecy' => 'currecy',
        'currecyEnum' => 'currecyEnum',
        'customer' => 'customer',
        'customerEmail' => 'customerEmail',
        'language' => 'language',
        'twoStep' => 'twoStep',
        'total' => 'total',
        'items' => 'items',
        'discount' => 'discount',
        'shippingCost' => 'shippingCost',
        'invoice' => 'invoice',
        'delivery' => 'delivery',
        'transactionId' => 'transactionId',
        'status' => 'status',
        'resultCode' => 'resultCode',
        'refundStatus' => 'refundStatus',
        'refunds' => 'refunds',
        'remainingTotal' => 'remainingTotal',
        'paymentDate' => 'paymentDate',
        'method' => 'method',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'salt' => 'setSalt',
        'merchant' => 'setMerchant',
        'orderRef' => 'setOrderRef',
        'currecy' => 'setCurrecy',
        'currecyEnum' => 'setCurrecyEnum',
        'customer' => 'setCustomer',
        'customerEmail' => 'setCustomerEmail',
        'language' => 'setLanguage',
        'twoStep' => 'setTwoStep',
        'total' => 'setTotal',
        'items' => 'setItems',
        'discount' => 'setDiscount',
        'shippingCost' => 'setShippingCost',
        'invoice' => 'setInvoice',
        'delivery' => 'setDelivery',
        'transactionId' => 'setTransactionId',
        'status' => 'setStatus',
        'resultCode' => 'setResultCode',
        'refundStatus' => 'setRefundStatus',
        'refunds' => 'setRefunds',
        'remainingTotal' => 'setRemainingTotal',
        'paymentDate' => 'setPaymentDate',
        'method' => 'setMethod',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'salt' => 'getSalt',
        'merchant' => 'getMerchant',
        'orderRef' => 'getOrderRef',
        'currecy' => 'getCurrecy',
        'currecyEnum' => 'getCurrecyEnum',
        'customer' => 'getCustomer',
        'customerEmail' => 'getCustomerEmail',
        'language' => 'getLanguage',
        'twoStep' => 'getTwoStep',
        'total' => 'getTotal',
        'items' => 'getItems',
        'discount' => 'getDiscount',
        'shippingCost' => 'getShippingCost',
        'invoice' => 'getInvoice',
        'delivery' => 'getDelivery',
        'transactionId' => 'getTransactionId',
        'status' => 'getStatus',
        'resultCode' => 'getResultCode',
        'refundStatus' => 'getRefundStatus',
        'refunds' => 'getRefunds',
        'remainingTotal' => 'getRemainingTotal',
        'paymentDate' => 'getPaymentDate',
        'method' => 'getMethod',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('salt', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('orderRef', $data ?? [], null);
        $this->setIfExists('currecy', $data ?? [], null);
        $this->setIfExists('currecyEnum', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('customerEmail', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('twoStep', $data ?? [], false);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('shippingCost', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('resultCode', $data ?? [], null);
        $this->setIfExists('refundStatus', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
        $this->setIfExists('remainingTotal', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets salt
     *
     * @return string|null
     */
    public function getSalt(): ?string
    {
        return $this->container['salt'];
    }

    /**
     * Sets salt
     *
     * @param string|null $salt salt
     *
     * @return $this
     */
    public function setSalt(?string $salt): static
    {
        if (is_null($salt)) {
            throw new InvalidArgumentException('non-nullable salt cannot be null');
        }
        $this->container['salt'] = $salt;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return string|null
     */
    public function getMerchant(): ?string
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param string|null $merchant merchant
     *
     * @return $this
     */
    public function setMerchant(?string $merchant): static
    {
        if (is_null($merchant)) {
            throw new InvalidArgumentException('non-nullable merchant cannot be null');
        }
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets orderRef
     *
     * @return string|null
     */
    public function getOrderRef(): ?string
    {
        return $this->container['orderRef'];
    }

    /**
     * Sets orderRef
     *
     * @param string|null $orderRef orderRef
     *
     * @return $this
     */
    public function setOrderRef(?string $orderRef): static
    {
        if (is_null($orderRef)) {
            throw new InvalidArgumentException('non-nullable orderRef cannot be null');
        }
        $this->container['orderRef'] = $orderRef;

        return $this;
    }

    /**
     * Gets currecy
     *
     * @return \Cone\SimplePay\Model\Currency|null
     */
    public function getCurrecy(): ?\Cone\SimplePay\Model\Currency
    {
        return $this->container['currecy'];
    }

    /**
     * Sets currecy
     *
     * @param \Cone\SimplePay\Model\Currency|null $currecy currecy
     *
     * @return $this
     */
    public function setCurrecy(?\Cone\SimplePay\Model\Currency $currecy): static
    {
        if (is_null($currecy)) {
            throw new InvalidArgumentException('non-nullable currecy cannot be null');
        }
        $this->container['currecy'] = $currecy;

        return $this;
    }

    /**
     * Gets currecyEnum
     *
     * @return \Cone\SimplePay\Model\Currency|null
     */
    public function getCurrecyEnum(): ?\Cone\SimplePay\Model\Currency
    {
        return $this->container['currecyEnum'];
    }

    /**
     * Sets currecyEnum
     *
     * @param \Cone\SimplePay\Model\Currency|null $currecyEnum currecyEnum
     *
     * @return $this
     */
    public function setCurrecyEnum(?\Cone\SimplePay\Model\Currency $currecyEnum): static
    {
        if (is_null($currecyEnum)) {
            throw new InvalidArgumentException('non-nullable currecyEnum cannot be null');
        }
        $this->container['currecyEnum'] = $currecyEnum;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer(): ?string
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer customer
     *
     * @return $this
     */
    public function setCustomer(?string $customer): static
    {
        if (is_null($customer)) {
            throw new InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customerEmail
     *
     * @return string|null
     */
    public function getCustomerEmail(): ?string
    {
        return $this->container['customerEmail'];
    }

    /**
     * Sets customerEmail
     *
     * @param string|null $customerEmail customerEmail
     *
     * @return $this
     */
    public function setCustomerEmail(?string $customerEmail): static
    {
        if (is_null($customerEmail)) {
            throw new InvalidArgumentException('non-nullable customerEmail cannot be null');
        }
        $this->container['customerEmail'] = $customerEmail;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Cone\SimplePay\Model\Language|null
     */
    public function getLanguage(): ?\Cone\SimplePay\Model\Language
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Cone\SimplePay\Model\Language|null $language language
     *
     * @return $this
     */
    public function setLanguage(?\Cone\SimplePay\Model\Language $language): static
    {
        if (is_null($language)) {
            throw new InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets twoStep
     *
     * @return bool|null
     */
    public function getTwoStep(): ?bool
    {
        return $this->container['twoStep'];
    }

    /**
     * Sets twoStep
     *
     * @param bool|null $twoStep twoStep
     *
     * @return $this
     */
    public function setTwoStep(?bool $twoStep): static
    {
        if (is_null($twoStep)) {
            throw new InvalidArgumentException('non-nullable twoStep cannot be null');
        }
        $this->container['twoStep'] = $twoStep;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal(): ?float
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return $this
     */
    public function setTotal(?float $total): static
    {
        if (is_null($total)) {
            throw new InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Cone\SimplePay\Model\Query200ResponseTransactionsInnerItemsInner[]|null
     */
    public function getItems(): ?array
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Cone\SimplePay\Model\Query200ResponseTransactionsInnerItemsInner[]|null $items items
     *
     * @return $this
     */
    public function setItems(?array $items): static
    {
        if (is_null($items)) {
            throw new InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount(): ?float
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount discount
     *
     * @return $this
     */
    public function setDiscount(?float $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets shippingCost
     *
     * @return float|null
     */
    public function getShippingCost(): ?float
    {
        return $this->container['shippingCost'];
    }

    /**
     * Sets shippingCost
     *
     * @param float|null $shippingCost shippingCost
     *
     * @return $this
     */
    public function setShippingCost(?float $shippingCost): static
    {
        if (is_null($shippingCost)) {
            throw new InvalidArgumentException('non-nullable shippingCost cannot be null');
        }
        $this->container['shippingCost'] = $shippingCost;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Cone\SimplePay\Model\Invoice|null
     */
    public function getInvoice(): ?\Cone\SimplePay\Model\Invoice
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Cone\SimplePay\Model\Invoice|null $invoice invoice
     *
     * @return $this
     */
    public function setInvoice(?\Cone\SimplePay\Model\Invoice $invoice): static
    {
        if (is_null($invoice)) {
            throw new InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \Cone\SimplePay\Model\Delivery|null
     */
    public function getDelivery(): ?\Cone\SimplePay\Model\Delivery
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \Cone\SimplePay\Model\Delivery|null $delivery delivery
     *
     * @return $this
     */
    public function setDelivery(?\Cone\SimplePay\Model\Delivery $delivery): static
    {
        if (is_null($delivery)) {
            throw new InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return float|null
     */
    public function getTransactionId(): ?float
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param float|null $transactionId transactionId
     *
     * @return $this
     */
    public function setTransactionId(?float $transactionId): static
    {
        if (is_null($transactionId)) {
            throw new InvalidArgumentException('non-nullable transactionId cannot be null');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Cone\SimplePay\Model\Status|null
     */
    public function getStatus(): ?\Cone\SimplePay\Model\Status
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Cone\SimplePay\Model\Status|null $status status
     *
     * @return $this
     */
    public function setStatus(?\Cone\SimplePay\Model\Status $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets resultCode
     *
     * @return string|null
     */
    public function getResultCode(): ?string
    {
        return $this->container['resultCode'];
    }

    /**
     * Sets resultCode
     *
     * @param string|null $resultCode resultCode
     *
     * @return $this
     */
    public function setResultCode(?string $resultCode): static
    {
        if (is_null($resultCode)) {
            throw new InvalidArgumentException('non-nullable resultCode cannot be null');
        }
        $this->container['resultCode'] = $resultCode;

        return $this;
    }

    /**
     * Gets refundStatus
     *
     * @return \Cone\SimplePay\Model\RefundStatus|null
     */
    public function getRefundStatus(): ?\Cone\SimplePay\Model\RefundStatus
    {
        return $this->container['refundStatus'];
    }

    /**
     * Sets refundStatus
     *
     * @param \Cone\SimplePay\Model\RefundStatus|null $refundStatus refundStatus
     *
     * @return $this
     */
    public function setRefundStatus(?\Cone\SimplePay\Model\RefundStatus $refundStatus): static
    {
        if (is_null($refundStatus)) {
            throw new InvalidArgumentException('non-nullable refundStatus cannot be null');
        }
        $this->container['refundStatus'] = $refundStatus;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \Cone\SimplePay\Model\Query200ResponseTransactionsInnerRefundsInner[]|null
     */
    public function getRefunds(): ?array
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \Cone\SimplePay\Model\Query200ResponseTransactionsInnerRefundsInner[]|null $refunds refunds
     *
     * @return $this
     */
    public function setRefunds(?array $refunds): static
    {
        if (is_null($refunds)) {
            throw new InvalidArgumentException('non-nullable refunds cannot be null');
        }
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets remainingTotal
     *
     * @return float|null
     */
    public function getRemainingTotal(): ?float
    {
        return $this->container['remainingTotal'];
    }

    /**
     * Sets remainingTotal
     *
     * @param float|null $remainingTotal remainingTotal
     *
     * @return $this
     */
    public function setRemainingTotal(?float $remainingTotal): static
    {
        if (is_null($remainingTotal)) {
            throw new InvalidArgumentException('non-nullable remainingTotal cannot be null');
        }
        $this->container['remainingTotal'] = $remainingTotal;

        return $this;
    }

    /**
     * Gets paymentDate
     *
     * @return string|null
     */
    public function getPaymentDate(): ?string
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     *
     * @param string|null $paymentDate The ISO 8601 format of the payment date.
     *
     * @return $this
     */
    public function setPaymentDate(?string $paymentDate): static
    {
        if (is_null($paymentDate)) {
            throw new InvalidArgumentException('non-nullable paymentDate cannot be null');
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets method
     *
     * @return \Cone\SimplePay\Model\Method|null
     */
    public function getMethod(): ?\Cone\SimplePay\Model\Method
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param \Cone\SimplePay\Model\Method|null $method method
     *
     * @return $this
     */
    public function setMethod(?\Cone\SimplePay\Model\Method $method): static
    {
        if (is_null($method)) {
            throw new InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
