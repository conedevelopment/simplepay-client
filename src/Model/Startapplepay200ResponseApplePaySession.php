<?php

/**
 * Startapplepay200ResponseApplePaySession
 *
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimplePay API v2
 *
 * This is a SimplePay API v2 documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@conedevelopment.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\SimplePay\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Cone\SimplePay\ObjectSerializer;

/**
 * Startapplepay200ResponseApplePaySession Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Startapplepay200ResponseApplePaySession implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'startapplepay_200_response_applePaySession';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = [
        'epochTimestamp' => 'int',
        'expiresAt' => 'int',
        'merchantSessionIdentifier' => 'string',
        'nonce' => 'string',
        'merchantIdentifier' => 'string',
        'domainName' => 'string',
        'displayName' => 'string',
        'signature' => 'string',
        'operationalAnalyticsIdentifier' => 'string',
        'retries' => 'int',
        'pspId' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'epochTimestamp' => null,
        'expiresAt' => null,
        'merchantSessionIdentifier' => null,
        'nonce' => null,
        'merchantIdentifier' => null,
        'domainName' => null,
        'displayName' => null,
        'signature' => null,
        'operationalAnalyticsIdentifier' => null,
        'retries' => null,
        'pspId' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = [
        'epochTimestamp' => false,
        'expiresAt' => false,
        'merchantSessionIdentifier' => false,
        'nonce' => false,
        'merchantIdentifier' => false,
        'domainName' => false,
        'displayName' => false,
        'signature' => false,
        'operationalAnalyticsIdentifier' => false,
        'retries' => false,
        'pspId' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'epochTimestamp' => 'epochTimestamp',
        'expiresAt' => 'expiresAt',
        'merchantSessionIdentifier' => 'merchantSessionIdentifier',
        'nonce' => 'nonce',
        'merchantIdentifier' => 'merchantIdentifier',
        'domainName' => 'domainName',
        'displayName' => 'displayName',
        'signature' => 'signature',
        'operationalAnalyticsIdentifier' => 'operationalAnalyticsIdentifier',
        'retries' => 'retries',
        'pspId' => 'pspId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'epochTimestamp' => 'setEpochTimestamp',
        'expiresAt' => 'setExpiresAt',
        'merchantSessionIdentifier' => 'setMerchantSessionIdentifier',
        'nonce' => 'setNonce',
        'merchantIdentifier' => 'setMerchantIdentifier',
        'domainName' => 'setDomainName',
        'displayName' => 'setDisplayName',
        'signature' => 'setSignature',
        'operationalAnalyticsIdentifier' => 'setOperationalAnalyticsIdentifier',
        'retries' => 'setRetries',
        'pspId' => 'setPspId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'epochTimestamp' => 'getEpochTimestamp',
        'expiresAt' => 'getExpiresAt',
        'merchantSessionIdentifier' => 'getMerchantSessionIdentifier',
        'nonce' => 'getNonce',
        'merchantIdentifier' => 'getMerchantIdentifier',
        'domainName' => 'getDomainName',
        'displayName' => 'getDisplayName',
        'signature' => 'getSignature',
        'operationalAnalyticsIdentifier' => 'getOperationalAnalyticsIdentifier',
        'retries' => 'getRetries',
        'pspId' => 'getPspId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('epochTimestamp', $data ?? [], null);
        $this->setIfExists('expiresAt', $data ?? [], null);
        $this->setIfExists('merchantSessionIdentifier', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('merchantIdentifier', $data ?? [], null);
        $this->setIfExists('domainName', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('operationalAnalyticsIdentifier', $data ?? [], null);
        $this->setIfExists('retries', $data ?? [], null);
        $this->setIfExists('pspId', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets epochTimestamp
     *
     * @return int|null
     */
    public function getEpochTimestamp(): ?int
    {
        return $this->container['epochTimestamp'];
    }

    /**
     * Sets epochTimestamp
     *
     * @param int|null $epochTimestamp The timestamp of the session start.
     *
     * @return $this
     */
    public function setEpochTimestamp(?int $epochTimestamp): static
    {
        if (is_null($epochTimestamp)) {
            throw new InvalidArgumentException('non-nullable epochTimestamp cannot be null');
        }
        $this->container['epochTimestamp'] = $epochTimestamp;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return int|null
     */
    public function getExpiresAt(): ?int
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param int|null $expiresAt The timestamp of the session expiration.
     *
     * @return $this
     */
    public function setExpiresAt(?int $expiresAt): static
    {
        if (is_null($expiresAt)) {
            throw new InvalidArgumentException('non-nullable expiresAt cannot be null');
        }
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets merchantSessionIdentifier
     *
     * @return string|null
     */
    public function getMerchantSessionIdentifier(): ?string
    {
        return $this->container['merchantSessionIdentifier'];
    }

    /**
     * Sets merchantSessionIdentifier
     *
     * @param string|null $merchantSessionIdentifier merchantSessionIdentifier
     *
     * @return $this
     */
    public function setMerchantSessionIdentifier(?string $merchantSessionIdentifier): static
    {
        if (is_null($merchantSessionIdentifier)) {
            throw new InvalidArgumentException('non-nullable merchantSessionIdentifier cannot be null');
        }
        $this->container['merchantSessionIdentifier'] = $merchantSessionIdentifier;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string|null
     */
    public function getNonce(): ?string
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string|null $nonce nonce
     *
     * @return $this
     */
    public function setNonce(?string $nonce): static
    {
        if (is_null($nonce)) {
            throw new InvalidArgumentException('non-nullable nonce cannot be null');
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets merchantIdentifier
     *
     * @return string|null
     */
    public function getMerchantIdentifier(): ?string
    {
        return $this->container['merchantIdentifier'];
    }

    /**
     * Sets merchantIdentifier
     *
     * @param string|null $merchantIdentifier The ApplePay merchant ID.
     *
     * @return $this
     */
    public function setMerchantIdentifier(?string $merchantIdentifier): static
    {
        if (is_null($merchantIdentifier)) {
            throw new InvalidArgumentException('non-nullable merchantIdentifier cannot be null');
        }
        $this->container['merchantIdentifier'] = $merchantIdentifier;

        return $this;
    }

    /**
     * Gets domainName
     *
     * @return string|null
     */
    public function getDomainName(): ?string
    {
        return $this->container['domainName'];
    }

    /**
     * Sets domainName
     *
     * @param string|null $domainName The FQDN.
     *
     * @return $this
     */
    public function setDomainName(?string $domainName): static
    {
        if (is_null($domainName)) {
            throw new InvalidArgumentException('non-nullable domainName cannot be null');
        }
        $this->container['domainName'] = $domainName;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName(): ?string
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName(?string $displayName): static
    {
        if (is_null($displayName)) {
            throw new InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature(): ?string
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return $this
     */
    public function setSignature(?string $signature): static
    {
        if (is_null($signature)) {
            throw new InvalidArgumentException('non-nullable signature cannot be null');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets operationalAnalyticsIdentifier
     *
     * @return string|null
     */
    public function getOperationalAnalyticsIdentifier(): ?string
    {
        return $this->container['operationalAnalyticsIdentifier'];
    }

    /**
     * Sets operationalAnalyticsIdentifier
     *
     * @param string|null $operationalAnalyticsIdentifier operationalAnalyticsIdentifier
     *
     * @return $this
     */
    public function setOperationalAnalyticsIdentifier(?string $operationalAnalyticsIdentifier): static
    {
        if (is_null($operationalAnalyticsIdentifier)) {
            throw new InvalidArgumentException('non-nullable operationalAnalyticsIdentifier cannot be null');
        }
        $this->container['operationalAnalyticsIdentifier'] = $operationalAnalyticsIdentifier;

        return $this;
    }

    /**
     * Gets retries
     *
     * @return int|null
     */
    public function getRetries(): ?int
    {
        return $this->container['retries'];
    }

    /**
     * Sets retries
     *
     * @param int|null $retries retries
     *
     * @return $this
     */
    public function setRetries(?int $retries): static
    {
        if (is_null($retries)) {
            throw new InvalidArgumentException('non-nullable retries cannot be null');
        }
        $this->container['retries'] = $retries;

        return $this;
    }

    /**
     * Gets pspId
     *
     * @return string|null
     */
    public function getPspId(): ?string
    {
        return $this->container['pspId'];
    }

    /**
     * Sets pspId
     *
     * @param string|null $pspId pspId
     *
     * @return $this
     */
    public function setPspId(?string $pspId): static
    {
        if (is_null($pspId)) {
            throw new InvalidArgumentException('non-nullable pspId cannot be null');
        }
        $this->container['pspId'] = $pspId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
