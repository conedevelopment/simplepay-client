<?php

/**
 * OneClickTransactionAllOfBrowser
 *
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimplePay API v2
 *
 * This is a SimplePay API v2 documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@conedevelopment.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\SimplePay\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Cone\SimplePay\ObjectSerializer;

/**
 * OneClickTransactionAllOfBrowser Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OneClickTransactionAllOfBrowser implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'OneClickTransaction_allOf_browser';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = [
        'ip' => 'string',
        'accept' => 'string',
        'agent' => 'string',
        'color' => 'int',
        'height' => 'int',
        'width' => 'int',
        'java' => 'bool',
        'lang' => 'string',
        'tz' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'ip' => null,
        'accept' => null,
        'agent' => null,
        'color' => null,
        'height' => null,
        'width' => null,
        'java' => null,
        'lang' => null,
        'tz' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = [
        'ip' => false,
        'accept' => false,
        'agent' => false,
        'color' => false,
        'height' => false,
        'width' => false,
        'java' => false,
        'lang' => false,
        'tz' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'ip' => 'ip',
        'accept' => 'accept',
        'agent' => 'agent',
        'color' => 'color',
        'height' => 'height',
        'width' => 'width',
        'java' => 'java',
        'lang' => 'lang',
        'tz' => 'tz',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'ip' => 'setIp',
        'accept' => 'setAccept',
        'agent' => 'setAgent',
        'color' => 'setColor',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'java' => 'setJava',
        'lang' => 'setLang',
        'tz' => 'setTz',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'ip' => 'getIp',
        'accept' => 'getAccept',
        'agent' => 'getAgent',
        'color' => 'getColor',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'java' => 'getJava',
        'lang' => 'getLang',
        'tz' => 'getTz',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('accept', $data ?? [], null);
        $this->setIfExists('agent', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('java', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('tz', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp(): ?string
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return $this
     */
    public function setIp(?string $ip): static
    {
        if (is_null($ip)) {
            throw new InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets accept
     *
     * @return string|null
     */
    public function getAccept(): ?string
    {
        return $this->container['accept'];
    }

    /**
     * Sets accept
     *
     * @param string|null $accept accept
     *
     * @return $this
     */
    public function setAccept(?string $accept): static
    {
        if (is_null($accept)) {
            throw new InvalidArgumentException('non-nullable accept cannot be null');
        }
        $this->container['accept'] = $accept;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return string|null
     */
    public function getAgent(): ?string
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param string|null $agent You may use 'navigator.userAgent' in JS.
     *
     * @return $this
     */
    public function setAgent(?string $agent): static
    {
        if (is_null($agent)) {
            throw new InvalidArgumentException('non-nullable agent cannot be null');
        }
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets color
     *
     * @return int|null
     */
    public function getColor(): ?int
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param int|null $color You may use 'screen.colorDepth' in JS.
     *
     * @return $this
     */
    public function setColor(?int $color): static
    {
        if (is_null($color)) {
            throw new InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight(): ?int
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height You may use 'screen.height' in JS.
     *
     * @return $this
     */
    public function setHeight(?int $height): static
    {
        if (is_null($height)) {
            throw new InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth(): ?int
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width You may use 'screen.width' in JS.
     *
     * @return $this
     */
    public function setWidth(?int $width): static
    {
        if (is_null($width)) {
            throw new InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets java
     *
     * @return bool|null
     */
    public function getJava(): ?bool
    {
        return $this->container['java'];
    }

    /**
     * Sets java
     *
     * @param bool|null $java You may use 'navigator.javaEnabled()' in JS.
     *
     * @return $this
     */
    public function setJava(?bool $java): static
    {
        if (is_null($java)) {
            throw new InvalidArgumentException('non-nullable java cannot be null');
        }
        $this->container['java'] = $java;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang(): ?string
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang You may use 'navigator.language' in JS.
     *
     * @return $this
     */
    public function setLang(?string $lang): static
    {
        if (is_null($lang)) {
            throw new InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets tz
     *
     * @return int|null
     */
    public function getTz(): ?int
    {
        return $this->container['tz'];
    }

    /**
     * Sets tz
     *
     * @param int|null $tz You may use 'new Date().getTimezoneOffset()' in JS.
     *
     * @return $this
     */
    public function setTz(?int $tz): static
    {
        if (is_null($tz)) {
            throw new InvalidArgumentException('non-nullable tz cannot be null');
        }
        $this->container['tz'] = $tz;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
