<?php

/**
 * Transaction
 *
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimplePay API v2
 *
 * This is a SimplePay API v2 documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@conedevelopment.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\SimplePay\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Cone\SimplePay\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'Transaction';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = [
        'customer' => 'string',
        'customerEmail' => 'string',
        'currency' => '\Cone\SimplePay\Model\Currency',
        'maySelectInvoice' => 'bool',
        'maySelectEmail' => 'bool',
        'maySelectDelivery' => 'string[]',
        'twoStep' => 'bool',
        'onlyCardReg' => 'bool',
        'url' => 'string',
        'urls' => '\Cone\SimplePay\Model\TransactionUrls',
        'language' => '\Cone\SimplePay\Model\Language',
        'discount' => 'float',
        'shippingCost' => 'float',
        'total' => 'float',
        'delivery' => '\Cone\SimplePay\Model\Delivery',
        'invoice' => '\Cone\SimplePay\Model\Invoice',
        'items' => '\Cone\SimplePay\Model\Item[]',
        'methods' => '\Cone\SimplePay\Model\Method[]',
        'timeout' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'customer' => null,
        'customerEmail' => 'email',
        'currency' => null,
        'maySelectInvoice' => null,
        'maySelectEmail' => null,
        'maySelectDelivery' => null,
        'twoStep' => null,
        'onlyCardReg' => null,
        'url' => null,
        'urls' => null,
        'language' => null,
        'discount' => null,
        'shippingCost' => null,
        'total' => null,
        'delivery' => null,
        'invoice' => null,
        'items' => null,
        'methods' => null,
        'timeout' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = [
        'customer' => false,
        'customerEmail' => false,
        'currency' => false,
        'maySelectInvoice' => false,
        'maySelectEmail' => false,
        'maySelectDelivery' => false,
        'twoStep' => false,
        'onlyCardReg' => false,
        'url' => false,
        'urls' => false,
        'language' => false,
        'discount' => false,
        'shippingCost' => false,
        'total' => false,
        'delivery' => false,
        'invoice' => false,
        'items' => false,
        'methods' => false,
        'timeout' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'customer' => 'customer',
        'customerEmail' => 'customerEmail',
        'currency' => 'currency',
        'maySelectInvoice' => 'maySelectInvoice',
        'maySelectEmail' => 'maySelectEmail',
        'maySelectDelivery' => 'maySelectDelivery',
        'twoStep' => 'twoStep',
        'onlyCardReg' => 'onlyCardReg',
        'url' => 'url',
        'urls' => 'urls',
        'language' => 'language',
        'discount' => 'discount',
        'shippingCost' => 'shippingCost',
        'total' => 'total',
        'delivery' => 'delivery',
        'invoice' => 'invoice',
        'items' => 'items',
        'methods' => 'methods',
        'timeout' => 'timeout',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'customer' => 'setCustomer',
        'customerEmail' => 'setCustomerEmail',
        'currency' => 'setCurrency',
        'maySelectInvoice' => 'setMaySelectInvoice',
        'maySelectEmail' => 'setMaySelectEmail',
        'maySelectDelivery' => 'setMaySelectDelivery',
        'twoStep' => 'setTwoStep',
        'onlyCardReg' => 'setOnlyCardReg',
        'url' => 'setUrl',
        'urls' => 'setUrls',
        'language' => 'setLanguage',
        'discount' => 'setDiscount',
        'shippingCost' => 'setShippingCost',
        'total' => 'setTotal',
        'delivery' => 'setDelivery',
        'invoice' => 'setInvoice',
        'items' => 'setItems',
        'methods' => 'setMethods',
        'timeout' => 'setTimeout',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'customer' => 'getCustomer',
        'customerEmail' => 'getCustomerEmail',
        'currency' => 'getCurrency',
        'maySelectInvoice' => 'getMaySelectInvoice',
        'maySelectEmail' => 'getMaySelectEmail',
        'maySelectDelivery' => 'getMaySelectDelivery',
        'twoStep' => 'getTwoStep',
        'onlyCardReg' => 'getOnlyCardReg',
        'url' => 'getUrl',
        'urls' => 'getUrls',
        'language' => 'getLanguage',
        'discount' => 'getDiscount',
        'shippingCost' => 'getShippingCost',
        'total' => 'getTotal',
        'delivery' => 'getDelivery',
        'invoice' => 'getInvoice',
        'items' => 'getItems',
        'methods' => 'getMethods',
        'timeout' => 'getTimeout',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('customerEmail', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('maySelectInvoice', $data ?? [], false);
        $this->setIfExists('maySelectEmail', $data ?? [], false);
        $this->setIfExists('maySelectDelivery', $data ?? [], null);
        $this->setIfExists('twoStep', $data ?? [], false);
        $this->setIfExists('onlyCardReg', $data ?? [], false);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('urls', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], 0);
        $this->setIfExists('shippingCost', $data ?? [], 0);
        $this->setIfExists('total', $data ?? [], 0);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('methods', $data ?? [], null);
        $this->setIfExists('timeout', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if (!is_null($this->container['discount']) && ($this->container['discount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shippingCost']) && ($this->container['shippingCost'] < 0)) {
            $invalidProperties[] = "invalid value for 'shippingCost', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['total']) && ($this->container['total'] <= 0)) {
            $invalidProperties[] = "invalid value for 'total', must be bigger than 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer(): ?string
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer customer
     *
     * @return $this
     */
    public function setCustomer(?string $customer): static
    {
        if (is_null($customer)) {
            throw new InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customerEmail
     *
     * @return string|null
     */
    public function getCustomerEmail(): ?string
    {
        return $this->container['customerEmail'];
    }

    /**
     * Sets customerEmail
     *
     * @param string|null $customerEmail customerEmail
     *
     * @return $this
     */
    public function setCustomerEmail(?string $customerEmail): static
    {
        if (is_null($customerEmail)) {
            throw new InvalidArgumentException('non-nullable customerEmail cannot be null');
        }
        $this->container['customerEmail'] = $customerEmail;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Cone\SimplePay\Model\Currency
     */
    public function getCurrency(): \Cone\SimplePay\Model\Currency
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Cone\SimplePay\Model\Currency $currency currency
     *
     * @return $this
     */
    public function setCurrency(\Cone\SimplePay\Model\Currency $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets maySelectInvoice
     *
     * @return bool|null
     */
    public function getMaySelectInvoice(): ?bool
    {
        return $this->container['maySelectInvoice'];
    }

    /**
     * Sets maySelectInvoice
     *
     * @param bool|null $maySelectInvoice maySelectInvoice
     *
     * @return $this
     */
    public function setMaySelectInvoice(?bool $maySelectInvoice): static
    {
        if (is_null($maySelectInvoice)) {
            throw new InvalidArgumentException('non-nullable maySelectInvoice cannot be null');
        }
        $this->container['maySelectInvoice'] = $maySelectInvoice;

        return $this;
    }

    /**
     * Gets maySelectEmail
     *
     * @return bool|null
     */
    public function getMaySelectEmail(): ?bool
    {
        return $this->container['maySelectEmail'];
    }

    /**
     * Sets maySelectEmail
     *
     * @param bool|null $maySelectEmail maySelectEmail
     *
     * @return $this
     */
    public function setMaySelectEmail(?bool $maySelectEmail): static
    {
        if (is_null($maySelectEmail)) {
            throw new InvalidArgumentException('non-nullable maySelectEmail cannot be null');
        }
        $this->container['maySelectEmail'] = $maySelectEmail;

        return $this;
    }

    /**
     * Gets maySelectDelivery
     *
     * @return string[]|null
     */
    public function getMaySelectDelivery(): ?array
    {
        return $this->container['maySelectDelivery'];
    }

    /**
     * Sets maySelectDelivery
     *
     * @param string[]|null $maySelectDelivery maySelectDelivery
     *
     * @return $this
     */
    public function setMaySelectDelivery(?array $maySelectDelivery): static
    {
        if (is_null($maySelectDelivery)) {
            throw new InvalidArgumentException('non-nullable maySelectDelivery cannot be null');
        }
        $this->container['maySelectDelivery'] = $maySelectDelivery;

        return $this;
    }

    /**
     * Gets twoStep
     *
     * @return bool|null
     */
    public function getTwoStep(): ?bool
    {
        return $this->container['twoStep'];
    }

    /**
     * Sets twoStep
     *
     * @param bool|null $twoStep twoStep
     *
     * @return $this
     */
    public function setTwoStep(?bool $twoStep): static
    {
        if (is_null($twoStep)) {
            throw new InvalidArgumentException('non-nullable twoStep cannot be null');
        }
        $this->container['twoStep'] = $twoStep;

        return $this;
    }

    /**
     * Gets onlyCardReg
     *
     * @return bool|null
     */
    public function getOnlyCardReg(): ?bool
    {
        return $this->container['onlyCardReg'];
    }

    /**
     * Sets onlyCardReg
     *
     * @param bool|null $onlyCardReg onlyCardReg
     *
     * @return $this
     */
    public function setOnlyCardReg(?bool $onlyCardReg): static
    {
        if (is_null($onlyCardReg)) {
            throw new InvalidArgumentException('non-nullable onlyCardReg cannot be null');
        }
        $this->container['onlyCardReg'] = $onlyCardReg;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl(?string $url): static
    {
        if (is_null($url)) {
            throw new InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return \Cone\SimplePay\Model\TransactionUrls|null
     */
    public function getUrls(): ?\Cone\SimplePay\Model\TransactionUrls
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param \Cone\SimplePay\Model\TransactionUrls|null $urls urls
     *
     * @return $this
     */
    public function setUrls(?\Cone\SimplePay\Model\TransactionUrls $urls): static
    {
        if (is_null($urls)) {
            throw new InvalidArgumentException('non-nullable urls cannot be null');
        }
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Cone\SimplePay\Model\Language|null
     */
    public function getLanguage(): ?\Cone\SimplePay\Model\Language
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Cone\SimplePay\Model\Language|null $language language
     *
     * @return $this
     */
    public function setLanguage(?\Cone\SimplePay\Model\Language $language): static
    {
        if (is_null($language)) {
            throw new InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount(): ?float
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount discount
     *
     * @return $this
     */
    public function setDiscount(?float $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }

        if (($discount < 0)) {
            throw new InvalidArgumentException('invalid value for $discount when calling Transaction., must be bigger than or equal to 0.');
        }

        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets shippingCost
     *
     * @return float|null
     */
    public function getShippingCost(): ?float
    {
        return $this->container['shippingCost'];
    }

    /**
     * Sets shippingCost
     *
     * @param float|null $shippingCost shippingCost
     *
     * @return $this
     */
    public function setShippingCost(?float $shippingCost): static
    {
        if (is_null($shippingCost)) {
            throw new InvalidArgumentException('non-nullable shippingCost cannot be null');
        }

        if (($shippingCost < 0)) {
            throw new InvalidArgumentException('invalid value for $shippingCost when calling Transaction., must be bigger than or equal to 0.');
        }

        $this->container['shippingCost'] = $shippingCost;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal(): ?float
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return $this
     */
    public function setTotal(?float $total): static
    {
        if (is_null($total)) {
            throw new InvalidArgumentException('non-nullable total cannot be null');
        }

        if (($total <= 0)) {
            throw new InvalidArgumentException('invalid value for $total when calling Transaction., must be bigger than 0.');
        }

        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \Cone\SimplePay\Model\Delivery|null
     */
    public function getDelivery(): ?\Cone\SimplePay\Model\Delivery
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \Cone\SimplePay\Model\Delivery|null $delivery delivery
     *
     * @return $this
     */
    public function setDelivery(?\Cone\SimplePay\Model\Delivery $delivery): static
    {
        if (is_null($delivery)) {
            throw new InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Cone\SimplePay\Model\Invoice|null
     */
    public function getInvoice(): ?\Cone\SimplePay\Model\Invoice
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Cone\SimplePay\Model\Invoice|null $invoice invoice
     *
     * @return $this
     */
    public function setInvoice(?\Cone\SimplePay\Model\Invoice $invoice): static
    {
        if (is_null($invoice)) {
            throw new InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Cone\SimplePay\Model\Item[]|null
     */
    public function getItems(): ?array
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Cone\SimplePay\Model\Item[]|null $items items
     *
     * @return $this
     */
    public function setItems(?array $items): static
    {
        if (is_null($items)) {
            throw new InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets methods
     *
     * @return \Cone\SimplePay\Model\Method[]|null
     */
    public function getMethods(): ?array
    {
        return $this->container['methods'];
    }

    /**
     * Sets methods
     *
     * @param \Cone\SimplePay\Model\Method[]|null $methods Possible values: CARD, WIRE or EAM.
     *
     * @return $this
     */
    public function setMethods(?array $methods): static
    {
        if (is_null($methods)) {
            throw new InvalidArgumentException('non-nullable methods cannot be null');
        }
        $this->container['methods'] = $methods;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return string|null
     */
    public function getTimeout(): ?string
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param string|null $timeout The ISO 8601 format of the timeout date.
     *
     * @return $this
     */
    public function setTimeout(?string $timeout): static
    {
        if (is_null($timeout)) {
            throw new InvalidArgumentException('non-nullable timeout cannot be null');
        }
        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
