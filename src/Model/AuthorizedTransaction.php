<?php

/**
 * AuthorizedTransaction
 *
 * PHP version 8.1
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SimplePay API v2
 *
 * This is a SimplePay API v2 documentation.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@conedevelopment.com
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cone\SimplePay\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Cone\SimplePay\ObjectSerializer;

/**
 * AuthorizedTransaction Class Doc Comment
 *
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AuthorizedTransaction implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'AuthorizedTransaction';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = [
        'originalTotal' => 'float',
        'approveTotal' => 'float',
        'currency' => '\Cone\SimplePay\Model\Currency',
        'orderRef' => 'string',
        'transactionId' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'originalTotal' => null,
        'approveTotal' => null,
        'currency' => null,
        'orderRef' => null,
        'transactionId' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = [
        'originalTotal' => false,
        'approveTotal' => false,
        'currency' => false,
        'orderRef' => false,
        'transactionId' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'originalTotal' => 'originalTotal',
        'approveTotal' => 'approveTotal',
        'currency' => 'currency',
        'orderRef' => 'orderRef',
        'transactionId' => 'transactionId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'originalTotal' => 'setOriginalTotal',
        'approveTotal' => 'setApproveTotal',
        'currency' => 'setCurrency',
        'orderRef' => 'setOrderRef',
        'transactionId' => 'setTransactionId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'originalTotal' => 'getOriginalTotal',
        'approveTotal' => 'getApproveTotal',
        'currency' => 'getCurrency',
        'orderRef' => 'getOrderRef',
        'transactionId' => 'getTransactionId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('originalTotal', $data ?? [], 0);
        $this->setIfExists('approveTotal', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('orderRef', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['originalTotal'] === null) {
            $invalidProperties[] = "'originalTotal' can't be null";
        }
        if (($this->container['originalTotal'] <= 0)) {
            $invalidProperties[] = "invalid value for 'originalTotal', must be bigger than 0.";
        }

        if ($this->container['approveTotal'] === null) {
            $invalidProperties[] = "'approveTotal' can't be null";
        }
        if (($this->container['approveTotal'] < 0)) {
            $invalidProperties[] = "invalid value for 'approveTotal', must be bigger than or equal to 0.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['orderRef'] === null) {
            $invalidProperties[] = "'orderRef' can't be null";
        }
        if ($this->container['transactionId'] === null) {
            $invalidProperties[] = "'transactionId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets originalTotal
     *
     * @return float
     */
    public function getOriginalTotal(): float
    {
        return $this->container['originalTotal'];
    }

    /**
     * Sets originalTotal
     *
     * @param float $originalTotal originalTotal
     *
     * @return $this
     */
    public function setOriginalTotal(float $originalTotal): static
    {
        if (is_null($originalTotal)) {
            throw new InvalidArgumentException('non-nullable originalTotal cannot be null');
        }

        if (($originalTotal <= 0)) {
            throw new InvalidArgumentException('invalid value for $originalTotal when calling AuthorizedTransaction., must be bigger than 0.');
        }

        $this->container['originalTotal'] = $originalTotal;

        return $this;
    }

    /**
     * Gets approveTotal
     *
     * @return float
     */
    public function getApproveTotal(): float
    {
        return $this->container['approveTotal'];
    }

    /**
     * Sets approveTotal
     *
     * @param float $approveTotal approveTotal
     *
     * @return $this
     */
    public function setApproveTotal(float $approveTotal): static
    {
        if (is_null($approveTotal)) {
            throw new InvalidArgumentException('non-nullable approveTotal cannot be null');
        }

        if (($approveTotal < 0)) {
            throw new InvalidArgumentException('invalid value for $approveTotal when calling AuthorizedTransaction., must be bigger than or equal to 0.');
        }

        $this->container['approveTotal'] = $approveTotal;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Cone\SimplePay\Model\Currency
     */
    public function getCurrency(): \Cone\SimplePay\Model\Currency
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Cone\SimplePay\Model\Currency $currency currency
     *
     * @return $this
     */
    public function setCurrency(\Cone\SimplePay\Model\Currency $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets orderRef
     *
     * @return string
     */
    public function getOrderRef(): string
    {
        return $this->container['orderRef'];
    }

    /**
     * Sets orderRef
     *
     * @param string $orderRef orderRef
     *
     * @return $this
     */
    public function setOrderRef(string $orderRef): static
    {
        if (is_null($orderRef)) {
            throw new InvalidArgumentException('non-nullable orderRef cannot be null');
        }
        $this->container['orderRef'] = $orderRef;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return float
     */
    public function getTransactionId(): float
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param float $transactionId transactionId
     *
     * @return $this
     */
    public function setTransactionId(float $transactionId): static
    {
        if (is_null($transactionId)) {
            throw new InvalidArgumentException('non-nullable transactionId cannot be null');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
